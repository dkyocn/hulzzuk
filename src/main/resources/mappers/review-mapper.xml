<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
  "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reviewMapper">

  <!-- resultMap -->
  <resultMap type="review" id="resultList">
    <result property="reviewId" column="REVIEW_ID"/>
    <result property="userRev" column="USER_REV"/>
    <result property="accoId" column="ACCO_ID"/>
    <result property="restId" column="REST_ID"/>
    <result property="attrId" column="ATTR_ID"/>
    <result property="userReviewText" column="USER_REVIEW_TEXT"/>
    <result property="createAt" column="CREATED_AT"/>
    <result property="updateAt" column="UPDATED_AT"/>
    <result property="userId" column="USER_ID"/>
  </resultMap>
 
 <!--  리뷰 총 갯수 조회용 쿼리 -->
	<select id="getReviewListCount" resultType="_int" parameterType="string">
		select count(*) from TB_REVIEW
	</select>
 
<!-- 리뷰 조회 리스트 -->
<select id="getReviewList" parameterType="HashMap" resultMap="resultList">
    SELECT r.REVIEW_ID, r.USER_REV, r.ACCO_ID, r.REST_ID, r.ATTR_ID, r.USER_REVIEW_TEXT, 
           r.CREATED_AT, r.UPDATED_AT, r.USER_ID, 
           u.USER_NICK  <!-- UserVO 정보 추가 -->
    FROM TB_REVIEW r
    JOIN TB_USER u ON r.USER_ID = u.USER_ID <!-- USER_ID로 JOIN -->
    <choose>
        <when test="locationEnum == 'ACCO'">
            WHERE r.ACCO_ID = #{locId}
        </when>
        <when test="locationEnum == 'REST'">
            WHERE r.REST_ID = #{locId}
        </when>
        <when test="locationEnum == 'ATTR'">
            WHERE r.ATTR_ID = #{locId}
        </when>
    </choose>
    <choose>
        <when test="sortEnum == 'DATEDESC'">
            ORDER BY r.CREATED_AT DESC
        </when>
        <when test="sortEnum == 'NAMEDESC'">
            ORDER BY r.ACCO_PLACENAME DESC
        </when>
    </choose>
</select>
 
  <!--  내 리뷰 조회 -->
  <select id="getMyReviewList" parameterType="Review" resultMap="resultList">
    SELECT * FROM  TB_REVIEW
    WHERE USER_ID = #{ userId }
	ORDER BY CREATED_AT ASC
</select>

<!-- 리뷰 1개 조회용 쿼리 -->
<select id="getReviewById" parameterType="Long" resultMap="resultList">
	SELECT * FROM TB_REVIEW
	WHERE REVIEW_ID = #{ reviewId }
</select>
  
<!--  숙소 새 리뷰 등록용 쿼리 -->
<!--  <insert id="insertAccoReview" parameterType="Review">
		insert into TB_REVIEW(USER_REV, ACCO_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( accoId ), #( userReviewText ), sysdate, #( userId ))
</insert>

 맛집 새 리뷰 등록용 쿼리
 <insert id="insertRestReview" parameterType="Review">
		insert into TB_REVIEW(USER_REV, REST_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( restId ), #( userReviewText ), sysdate, #( userId ))
</insert>

 즐길거리 새 리뷰 등록용 쿼리
 <insert id="insertAttrReview" parameterType="Review">
		insert into TB_REVIEW(USER_REV, ATTR_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( attrId ), #( userReviewText ), sysdate, #( userId ))
</insert>  -->
	
<!-- 리뷰 삭제용 쿼리 -->
 <delete id="deleteReview" parameterType="Long">
 		delete from TB_REVIEW
 		where REVIEW_ID = #{ reviewId }
 </delete>
 
 </mapper>
	