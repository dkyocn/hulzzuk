<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
  "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="reviewMapper">

  <!-- resultMap -->
  <resultMap type="review" id="resultList">
    <result property="reviewId" column="REVIEW_ID"/>
    <result property="userRev" column="USER_REV"/>
    <result property="accoId" column="ACCO_ID"/>
    <result property="restId" column="REST_ID"/>
    <result property="attrId" column="ATTR_ID"/>
    <result property="userReviewText" column="USER_REVIEW_TEXT"/>
    <result property="createAt" column="CREATED_AT"/>
    <result property="updateAt" column="UPDATED_AT"/>
    <result property="userId" column="USER_ID"/>
  </resultMap>
 
 <!--  리뷰 총 갯수 조회용 쿼리 -->
	<select id="getReviewListCount" resultType="_int" parameterType="string">
		select count(*) from notice
	</select>
 
  <!-- 리뷰 조회 리스트 -->
  <select id="getReviewList" parameterType="hashmap" resultMap="resultList">
  SELECT * FROM  TB_REVIEW
  <choose>
  		<when test="locationEnum == 'ACCO'">
  				where ACCO_ID = #{ locId }
  		</when>
  		<when test="locationEnum == 'REST'">
  				where REST_ID = #{ locId }
  		</when>
  		<when test="locationEnum == 'ACCO'">
  				where ATTR_ID = #{ locId }
  		</when>
  </choose>
	<choose>
	  <when test="sortEnum == 'DATEDESC'">
	    ORDER BY CREATED_AT DESC
	  </when>
	  <when test="sortEnum == 'NAMEDESC'">
	    ORDER BY ACCO_PLACENAME DESC
	  </when>
	</choose>
</select>
 
  <!--  내 리뷰 조회 -->
  <select id="getMyReviewList" parameterType="Review" resultMap="resultList">
    SELECT * FROM  REVIEW
    WHRER USER_ID = #{ userId }
	ORDER BY CREATED_AT DESC
</select>
  
 <!-- 숙소 새 리뷰 등록용 쿼리 -->
 <insert id="insertAccoReview" parameterType="Review">
		insert into review(USER_REV, ACCO_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( accoId ), #( userReviewText ), sysdate, #( userId ))
</insert>

 <!-- 맛집 새 리뷰 등록용 쿼리 -->
 <insert id="insertRestReview" parameterType="Review">
		insert into review(USER_REV, REST_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( restId ), #( userReviewText ), sysdate, #( userId ))
</insert>

 <!-- 즐길거리 새 리뷰 등록용 쿼리 -->
 <insert id="insertAttrReview" parameterType="Review">
		insert into review(USER_REV, ATTR_ID, USER_REVIEW_TEXT, CREATED_AT, USER_ID)
		values (#( userRev ), #( attrId ), #( userReviewText ), sysdate, #( userId ))
</insert>
	
<!-- 리뷰 삭제용 쿼리 -->
 <delete id="deleteReview" parameterType="_int">
 		delete from review
 		where userId = #{ userId }
 		and reviewId = #{ reviewId }
 </delete>
 
 <!--  리뷰 수정용 쿼리 -->
 <update id="updateReview" parameterType="Review">
		update review 
		<if test="originalFilePath == null">
			set noticetitle = #{ noticeTitle }, noticeWriter = #{ noticeWriter },
				noticecontent = #{ noticeContent }, noticedate = sysdate,
				original_filepath = null, rename_filepath = null,
				importance = #{ importance }, imp_end_date = #{ impEndDate }
		</if>
		<if test="originalFilePath != null">
			set noticetitle = #{ noticeTitle }, noticeWriter = #{ noticeWriter },
				noticecontent = #{ noticeContent }, noticedate = sysdate,
				original_filepath = #{ originalFilePath }, rename_filepath = #{ renameFilePath },
				importance = #{ importance }, imp_end_date = #{ impEndDate }
		</if>
		where noticeno = #{ noticeNo }
	</update>
 
</mapper>
	